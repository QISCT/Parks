<?php

namespace App\DataTables;

require_once(app_path('DataTables/DataFactory.php'));

use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Date;
use function foo\func;

class DataTableResponse
{
	protected $columns;
	protected $order;
	protected $page;
	protected $pageLength;
	protected $items;
	protected $total;
	protected $filtered;
	protected $rows;
	private $options;

	public function __construct($items, $_settings)
	{
		$this->items = $items;
		$this->columns = collect($_settings["columns"]);
		$this->order = collect($_settings["order"]);
		$this->page = $_settings['start'] / $_settings['length'] + 1;
		$this->pageLength = $_settings['length'];
		$this->total = $items->count();
		$this->options = [];
		$this->rows = collect([]);
		//$this->assign($items);
		$this->run();
	}

	protected function assign($items)
	{
		DB::connection()->enableQueryLog();
		$this->rows = $items->map(function ($item) {
			return new DataTableRow($item, collect($this->columns));
		});
		dd(DB::getQueryLog());
	}

	protected function run()
	{
		$this->selectable();
		$this->search();
		$this->sort();
        dd('run');
		$this->paginate();
		$this->build();
	}

	protected function selectable()
	{
		for ($i = 0; $i < $this->columns->count(); $i++) {
			$col = $this->columns[$i];
			if ($col['selectable'] === "false")
				continue;
			$this->options[$i] = [
				'options' => $this->items->map(function ($value) use ($col) {
					return $this->getThroughModel($col['data'], $value);
				})->unique()->sort()->values()->all(),
				'value' => $col['search']['value'],
			];
		}
	}

	protected function build()
	{
		foreach ($this->items as $index => $item) {
			$row = collect(['id' => $item->id]);
			foreach ($this->columns as $col) {
				if (!array_key_exists('type', $col)) {
					$col['type'] = "string";
				}
				switch (strtolower($col['type'])) {
					case "string":
						$row[$col['data']] = $this->getThroughModel($col['data'], $item);
						break;
					case "btn":
						$value = "<a href=\"{$this->getThroughModel($col['data'], $item)}\" ";
						$value .= "class=\"{$col['classes']}\">";
						$value .= $col['icon'] . " " . $col['text'];
						$value .= "</a>";
						$row[$col['data']] = $value;
						break;
					case "link":
						$value = "<a href=\"{$this->getThroughModel($col['href'], $item)}\">";
						$value .= $this->getThroughModel($col['data'], $item);
						$value .= "</a>";
						$row[$col['data']] = $value;
						break;
					case "count":
						$value = '<span class="badge badge-mw badge-dark">';
						$value .= $this->getThroughModel($col['data'], $item)->count();
						$value .= '</span>';
						$row[$col['data']] = $value;
						break;
					case "badge":
						$value = '<span class="badge badge-mw badge-' . $this->getThroughModel($col['badge'], $item) . '">';
						$value .= $this->getThroughModel($col['data'], $item);
						$value .= '</span>';
						$row[$col['data']] = $value;
						break;
					case "list":
						$value = '';
						foreach ($this->getThroughModel($col['data'], $item) as $li)
							$value .= trim($li->{$col['key']} ?? null) . '<br />';
						$row[$col['data']] = $value;
						break;
				}
				// add active or inactive badges
				if ($col['data'] === 'active') {
					$value = $this->getThroughModel($col['data'], $item) == '1' ? '<span class="badge badge-success">Active' : '<span class="badge badge-danger">Inactive';
					$value .= '</span>';
					$row[$col['data']] = $value;
				}
				// template view download
				if ($col['data'] === 'template') {
					if ($item->file) { // check file exist
						$row[$col['data']] = view('include.portal.file-btns', ['id' => $item->file->id])->render();
					}
				}
			}
			$this->addRow($row);
		}
	}

	protected function getThroughModel($accessors, $item)
	{
		if ($accessors == 'ignore')
			return null;
		foreach (explode('-', $accessors) as $accessor) {
			$item = $item->{$accessor} ?? null;
		}
		return $item;
	}

	public function addRow(Collection $row)
	{
		return $this->rows->push($row);
	}

	public function toJSON()
	{
		$response = new \stdClass();
		$response->data = [];
		foreach ($this->rows as $row) {
			$json = new \stdClass();
			$i = -1; //Doesnt start at 0 because of the added id column
			foreach ($row as $key => $cell) {
				$col = $this->columns[$i] ?? [];
				if(array_key_exists('format', $col))
					$cell = $cell->format;
				$json->{$key} = $cell;
				$i++;
			}
			array_push($response->data, $json);
		}
		$response->recordsFiltered = $this->filtered;
		$response->recordsTotal = $this->total;
		$response->options = $this->options;
		return json_encode($response);
	}

	protected function paginate()
	{
		$this->filtered = $this->items->count();
		$this->items = $this->items->forPage($this->page, $this->pageLength)->values();
	}

	protected function sort()
	{
		$sorted = $this->items;
		switch ($this->order->count()) {
			case 0:
				break;
			default:
				if ($this->columns[$this->order[0]['column']]['type'] == "count") {
					$sorted = collect($sorted->sortBy(function ($item) {
						return $this->getThroughModel($this->columns[$this->order[0]['column']]['data'], $item);
					})->values());
				} else {
					$sorted = collect($sorted->sortNat(function ($item) {
						return $this->getThroughModel($this->columns[$this->order[0]['column']]['data'], $item);
					})->values());
				}
				if ($this->order[0]['dir'] == "desc")
					$sorted = collect($sorted->reverse()->values());
				break;
		}
		$this->items = $sorted;
	}

	protected function search()
	{
		$filters = collect([]);
		foreach ($this->columns as $column) {
			if (!$column['search']['value'])
				continue;
			if ($column['searchable'] === "false")
				continue;
			$filters->push(["data" => $column['data'], "value" => $column['search']['value'], "type" => $column['type']]);
		}

		$this->items = $this->items->filter(function ($model) use ($filters) {
			$passed = true;

			foreach ($filters as $filter) {
				$value = $this->getThroughModel($filter['data'], $model);

				if (strpos($filter['value'], '|') !== false) {
					if (!$this->substr_in_array($value, explode('|', $filter['value'])))
						$passed = false;
				} elseif (strpos($filter['value'], ';') !== false) {
					$dates = explode(';', $filter['value']);
					$date_before = Date::parse($dates[0]);
					$date_val = Date::parse($value);
					$date_after = Date::parse($dates[1]);
					if ($date_before > $date_val)
						$passed = false;
				} else {
					if (strpos(strtolower($value), strtolower($filter['value'])) === false && strtolower(trim($value)) != strtolower(trim($filter['value']))) {
						$passed = false;
					}
				}
			}

			return $passed;
		});
	}

	function substr_in_array($needle, array $haystack)
	{
		foreach ($haystack as $key => $item) {
			if (strpos(strtolower($needle), strtolower($item)) !== false)
				return true;

			if (strtolower(trim($item)) == strtolower(trim($needle)))
				return true;
		}
		return false;
	}
}
